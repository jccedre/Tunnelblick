diff -u -r Sparkle 1.5b6/Extras/Source Code/SUUpdateAlert.m Sparkle 1.5b6_patch9/Extras/Source Code/SUUpdateAlert.m
--- Sparkle 1.5b6/Extras/Source Code/SUUpdateAlert.m	2008-09-13 23:55:00.000000000 -0400
+++ Sparkle 1.5b6_patch9/Extras/Source Code/SUUpdateAlert.m	2016-02-16 15:18:16.000000000 -0500
@@ -9,6 +9,8 @@
 #import "SUUpdateAlert.h"
 
 #import "SUHost.h"
+#import "SUDSAVerifier.h"
+#import "SUUpdateDriver.h"
 #import <WebKit/WebKit.h>
 
 @implementation SUUpdateAlert
@@ -59,6 +61,76 @@
 	[self endWithSelection:SURemindMeLaterChoice];
 }
 
+- (NSMutableData *) getReleaseNotesAtURL: (NSURL *)url
+{
+    if (  ! url  ) {
+        NSLog(@"Sparkle Updater: getReleaseNotesAtURL: url == nil");
+        return nil;
+    }
+	
+    // Create an NSURLRequest
+    NSMutableURLRequest * req = [[[NSMutableURLRequest alloc] initWithURL: url] autorelease];
+    if ( ! req  ) {
+        NSLog(@"Sparkle Updater: getReleaseNotesAtURL: could not obtain URL request with '%@'", url);
+        return nil;
+    }
+    
+    NSDictionary * dict = [[NSApp delegate] tunnelblickInfoDictionary];
+    NSString * tbLongVersion = [dict objectForKey: @"CFBundleShortVersionString"];
+    NSString * tbBuildNumber = [dict objectForKey: @"CFBundleVersion"];
+    NSString * userAgent = [NSString stringWithFormat: @"Tunnelblick/%@ Sparkle/%@", tbLongVersion, tbBuildNumber];
+    [req setValue: userAgent forHTTPHeaderField: @"User-Agent"];
+    
+    NSString * hostName = [url host];
+    [req setValue: hostName  forHTTPHeaderField: @"Host"];
+
+    [req setCachePolicy: NSURLRequestReloadIgnoringLocalAndRemoteCacheData];
+
+    // Make the request synchronously.
+    //
+    // Implements the timeout and times the requests
+    NSHTTPURLResponse * urlResponse = nil;
+	NSError * requestError = nil;
+	NSData * data = nil;
+	BOOL firstTimeThru = TRUE;
+    time_t startTime = time(0);
+    time_t endTime = startTime + 30;
+    
+	// On OS X 10.10 ("Yosemite"), the first request seems to always fail, so we retry several times, starting with a 1 second timeout for the request,
+	// and doubling (up to 8 seconds) the timeout each time it fails (to 2, 4, 8, 8, 8...)
+	NSTimeInterval internalTimeOut = 1.0;
+	while (   (! data)
+           && (time(0) < endTime)  ) {
+		if (  firstTimeThru  ) {
+			firstTimeThru = FALSE;
+		} else {
+			// Failed; sleep for one second and double the request timeout
+			sleep(1);
+			if (  internalTimeOut < 8.0  ) {
+				internalTimeOut *= 2.0;
+			}
+		}
+		[req setTimeoutInterval: internalTimeOut];
+		data = nil;
+		requestError = nil;
+		urlResponse  = nil;
+		data = [NSURLConnection sendSynchronousRequest: req returningResponse: &urlResponse error: &requestError];
+	}
+    
+	if ( ! data  ) {
+	time_t elapsedTime = time(0) - startTime;
+        NSLog(@"Sparkle Updater: getReleaseNotesAtURL: Release notes could not be fetched within %ld seconds; the error was '%@'; the response was '%@'",
+              (long)elapsedTime, requestError, urlResponse);
+        return nil;
+	}
+    
+    return [[data mutableCopy] autorelease];
+}
+
+- (NSString *)createHTML:(NSString *)content
+{
+	return [NSString stringWithFormat: @"<strong><big><big>%@</big></big></strong>", content];
+}
 - (void)displayReleaseNotes
 {
 	// Set the default font, but avoid polluting the standard preferences.
@@ -82,16 +154,31 @@
 	{
 		if ([[updateItem releaseNotesURL] isFileURL])
 		{
-			[[releaseNotesView mainFrame] loadHTMLString:@"Release notes with file:// URLs are not supported for security reasons&mdash;Javascript would be able to read files on your file system." baseURL:nil];
+			[[releaseNotesView mainFrame] loadHTMLString:[self createHTML:@"Release notes with file:// URLs are not supported for security reasons."] baseURL:nil];
 		}
 		else
 		{
-			[[releaseNotesView mainFrame] loadRequest:[NSURLRequest requestWithURL:[updateItem releaseNotesURL] cachePolicy:NSURLRequestReloadIgnoringCacheData timeoutInterval:30]];
+			NSMutableData * data = [self getReleaseNotesAtURL:[updateItem releaseNotesURL]];
+			
+			if ((![host publicDSAKey]) || [SUDSAVerifier validateData:data fromItemName:@"update notes" withPublicDSAKey:[host publicDSAKey]]  )
+			{
+				NSString * releaseNotesHTML = [[[NSString alloc] initWithData: data encoding: NSUTF8StringEncoding] autorelease];
+				if (releaseNotesHTML)
+				{
+					[[releaseNotesView mainFrame] loadHTMLString:releaseNotesHTML baseURL:nil];
+				}
+				else
+				{
+					[[releaseNotesView mainFrame] loadHTMLString:[self createHTML:@"Release notes are not encoded with UTF-8."] baseURL:nil];
+				}
+			} else {
+				[[releaseNotesView mainFrame] loadHTMLString:[self createHTML:@"Release notes did not have a valid digital signature. Either a \"man in the middle\" attack is happening or the update server is misconfigured."] baseURL:nil];
+			}
 		}
 	}
 	else
 	{
-		[[releaseNotesView mainFrame] loadHTMLString:[updateItem itemDescription] baseURL:nil];
+		[[releaseNotesView mainFrame] loadHTMLString:[self createHTML:[updateItem itemDescription]] baseURL:nil];
 	}	
 }
 
